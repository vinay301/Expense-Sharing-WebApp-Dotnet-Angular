// <auto-generated />
using System;
using ExpenseSharingWebApp.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseSharingWebApp.DAL.Migrations
{
    [DbContext(typeof(ExpenseSharingDbContext))]
    [Migration("20240630074711_SeededNewUsers")]
    partial class SeededNewUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.Expense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<string>("PaidByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidByUserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.ExpenseSplit", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpenseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountOwed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<string>("PaidToUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ExpenseId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseSplits");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExpenseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93dd512a-603d-425d-9b0c-b7180b054163",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c639ef07-a55d-45b0-8130-84574b531920",
                            Email = "admin@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@EXPENSE.COM",
                            NormalizedUserName = "ADMIN@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2IzMsoBA9nbeVonAIxvE60T73W1HO0/TtJwYCb6s8dEzFCRKWZlKfoeGes5jnMvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d96d7a33-dfa5-41bb-bde8-3510142ba939",
                            TwoFactorEnabled = false,
                            UserName = "admin@expense.com"
                        },
                        new
                        {
                            Id = "f6fc62d8-ff1f-40a1-8c00-595fc5ac4b02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03a90066-3a71-4f9d-8da1-c168be9c3d8b",
                            Email = "user@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User",
                            NormalizedEmail = "USER@EXPENSE.COM",
                            NormalizedUserName = "USER@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+yBcwECMsQ1ZRj601sAAooi8aVwf2dEs0AkFHsEK3a6P3Vwgh3OT5nxsBTd0CyFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ecf3029-532d-4398-a914-c96e45d90d37",
                            TwoFactorEnabled = false,
                            UserName = "user@expense.com"
                        },
                        new
                        {
                            Id = "f5368239-3d17-4195-bb6b-606f7c5a70c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccbfcdb8-9327-42e5-9fc0-5eb8359f3156",
                            Email = "user2@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User2",
                            NormalizedEmail = "USER2@EXPENSE.COM",
                            NormalizedUserName = "USER2@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0CcfBrVd5qkCcKRrJ+bdOMpC2pxVY8dpjy84LcnGo0ooD3TOgbQO2zhP4t3d5SMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cd7e1f2-48ea-45a7-94b9-e89052442ee4",
                            TwoFactorEnabled = false,
                            UserName = "user2@expense.com"
                        },
                        new
                        {
                            Id = "daecf59e-a22c-4851-9f0e-d087e0ae6d6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e464bf3-310d-4c5a-b2b2-c2a1b1073191",
                            Email = "user3@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User3",
                            NormalizedEmail = "USER3@EXPENSE.COM",
                            NormalizedUserName = "USER3@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENyzpys9mC1AFS/gnt4wxVbMffNO5bphEnPRMgG4npwAscub6yxupbon/kOPxx7LPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b6a57da-d5a9-4dcb-8979-b63519d52827",
                            TwoFactorEnabled = false,
                            UserName = "user3@expense.com"
                        },
                        new
                        {
                            Id = "e0d979ea-e393-444c-aaf1-03184175a857",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aed86861-ba2e-4d96-9d24-b15914d5f88e",
                            Email = "user4@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User4",
                            NormalizedEmail = "USER4@EXPENSE.COM",
                            NormalizedUserName = "USER4@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKYoDTr0Mp3hbJzExWB8EJfWGYIcLAM1hlHGdVwIiUKY+IAJAemq6bZwxCAoQkYAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6aafcbee-0b4c-4d8c-8a90-2bf4b36bb3fe",
                            TwoFactorEnabled = false,
                            UserName = "user4@expense.com"
                        },
                        new
                        {
                            Id = "bc7000b9-8cbf-4129-9aa2-e7a7156def1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b60fddeb-e86e-412d-a509-dde3c93d6425",
                            Email = "user5@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User5",
                            NormalizedEmail = "USER5@EXPENSE.COM",
                            NormalizedUserName = "USER5@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJAfmpjQ0DZHECIA/3Zji1h+X+pkBdHB32OJc7ST2ZSiXyzg2PSJ8rGpvPIVSuXOpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b77c294b-aedc-4e96-8127-525b77c123ce",
                            TwoFactorEnabled = false,
                            UserName = "user5@expense.com"
                        },
                        new
                        {
                            Id = "6aaecb55-2f49-408b-9802-017a935f5a4b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a2824df-866b-4677-a3f3-7aadb90833a2",
                            Email = "user6@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User6",
                            NormalizedEmail = "USER6@EXPENSE.COM",
                            NormalizedUserName = "USER6@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8jiTYMwwEG3csgvAWICcG5XtehDFXtpHoPzmkIb9QWmjjoU+nB5tPnAm3tScMpcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a47a2a9-607c-4b11-9f00-dec5a9d49261",
                            TwoFactorEnabled = false,
                            UserName = "user6@expense.com"
                        },
                        new
                        {
                            Id = "2d421861-5a7a-47e9-a42a-82e290b54787",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c3a1b96-eb92-4971-b096-58dd53332717",
                            Email = "user7@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User7",
                            NormalizedEmail = "USER7@EXPENSE.COM",
                            NormalizedUserName = "USER7@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBliMIuhly9kPTcZq3CBbZUfQ8NivbBRb/0HZ1T0VcgNyuHJp1bOtixeC65j14r4mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b62653be-a8aa-4942-8427-393d2d14cf44",
                            TwoFactorEnabled = false,
                            UserName = "user7@expense.com"
                        },
                        new
                        {
                            Id = "6683d7b5-e6db-41d8-b824-9f571281fd93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b066392-3a3b-494e-8d0a-9915ee48812b",
                            Email = "user8@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User8",
                            NormalizedEmail = "USER8@EXPENSE.COM",
                            NormalizedUserName = "USER8@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfDF5+Cp0DoKqrCE+AM5U22RAwb0tr6K9lwlOBGiCNu4kprCD6+Vl7vLhXrUADpOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "488f1e9d-cad2-4093-8913-e8563c18cb8f",
                            TwoFactorEnabled = false,
                            UserName = "user8@expense.com"
                        },
                        new
                        {
                            Id = "c6695c36-d7b3-4b34-bea9-680c584c222f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48d8e08a-355b-49d6-a76d-d405bfd9ccc6",
                            Email = "user9@expense.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "User9",
                            NormalizedEmail = "USER9@EXPENSE.COM",
                            NormalizedUserName = "USER9@EXPENSE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECGh66IljAcMbWqEMyWvNlQ+GCsXhbzEdlkbU5b4mE6laM6dWvtjBAmEtmBGX3hb4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3235cde8-a155-4a91-9283-2cd49861c057",
                            TwoFactorEnabled = false,
                            UserName = "user9@expense.com"
                        });
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.UserBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountOwed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBalances");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "User2",
                            NormalizedName = "USER2"
                        },
                        new
                        {
                            Id = "4",
                            Name = "User3",
                            NormalizedName = "USER3"
                        },
                        new
                        {
                            Id = "5",
                            Name = "User4",
                            NormalizedName = "USER4"
                        },
                        new
                        {
                            Id = "6",
                            Name = "User5",
                            NormalizedName = "USER5"
                        },
                        new
                        {
                            Id = "7",
                            Name = "User6",
                            NormalizedName = "USER6"
                        },
                        new
                        {
                            Id = "8",
                            Name = "User7",
                            NormalizedName = "USER7"
                        },
                        new
                        {
                            Id = "9",
                            Name = "User8",
                            NormalizedName = "USER8"
                        },
                        new
                        {
                            Id = "10",
                            Name = "User9",
                            NormalizedName = "USER9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "93dd512a-603d-425d-9b0c-b7180b054163",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "f6fc62d8-ff1f-40a1-8c00-595fc5ac4b02",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "f5368239-3d17-4195-bb6b-606f7c5a70c3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "daecf59e-a22c-4851-9f0e-d087e0ae6d6d",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "e0d979ea-e393-444c-aaf1-03184175a857",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "bc7000b9-8cbf-4129-9aa2-e7a7156def1b",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "6aaecb55-2f49-408b-9802-017a935f5a4b",
                            RoleId = "7"
                        },
                        new
                        {
                            UserId = "2d421861-5a7a-47e9-a42a-82e290b54787",
                            RoleId = "8"
                        },
                        new
                        {
                            UserId = "6683d7b5-e6db-41d8-b824-9f571281fd93",
                            RoleId = "9"
                        },
                        new
                        {
                            UserId = "c6695c36-d7b3-4b34-bea9-680c584c222f",
                            RoleId = "10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.Expense", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", "PaidByUser")
                        .WithMany("Expenses")
                        .HasForeignKey("PaidByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Group");

                    b.Navigation("PaidByUser");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.ExpenseSplit", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.Expense", "Expense")
                        .WithMany("ExpenseSplits")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", "User")
                        .WithMany("ExpenseSplits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.User", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.Expense", null)
                        .WithMany("SplitAmong")
                        .HasForeignKey("ExpenseId");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.UserBalance", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.Group", "Group")
                        .WithMany("UserBalances")
                        .HasForeignKey("GroupId");

                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", "User")
                        .WithMany("UserBalances")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.UserGroup", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExpenseSharingWebApp.DAL.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.Expense", b =>
                {
                    b.Navigation("ExpenseSplits");

                    b.Navigation("SplitAmong");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("UserBalances");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("ExpenseSharingWebApp.DAL.Models.Domain.User", b =>
                {
                    b.Navigation("ExpenseSplits");

                    b.Navigation("Expenses");

                    b.Navigation("UserBalances");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
